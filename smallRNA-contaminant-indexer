import requests
from Bio import SeqIO
from io import StringIO, BytesIO
from Bio.Seq import Seq
import gzip
import argparse

base_url = "https://github.com/RemyKlein/smallRNA-contaminant-indexer/releases/download/v1.0.0/"
all_type_rna = [
    "miRNA", "piRNA", "tRNA", "snRNA", "snoRNA", "vaultRNA", "mtrRNA", "mttRNA", "LSU_rRNA", "SSU_rRNA"
]

def upload_miRBase(specie, target_rna):

    contaminants = [rna for rna in all_type_rna if rna != target_rna]

    output_file = []

    for rna in contaminants:
        if rna in ["LSU_rRNA", "SSU_rRNA"]:
            url = base_url + f"{rna}.fa.gz"
        elif rna == "vaultRNA":
            url = base_url + f"hsa_{rna}.fa.gz"
        else:
            url = base_url + f"{specie}_{rna}.fa.gz"
        
        response = requests.get(url, stream=True)
        if response.status_code != 200:
            raise ValueError(f"Download failed for {specie} {rna}: {response.status_code}")
        
        compressed_file = BytesIO(response.content)
        with gzip.open(compressed_file, mode="rt") as file:
            file_like = StringIO(file.read())
            output_file.append(file_like)
    
    return output_file

def main():
    parser = argparse.ArgumentParser(
        description="Download, process, and concatenate small RNA contaminant sequences to generate Bowtie indices for filtering smallRNA-seq reads."
        )

list_file = upload_miRBase("mmu", "miRNA")

for file in list_file:
    for record in SeqIO.parse(file, "fasta"):
        print(f"ID: {record.id}")
        print(f"description: {record.description}")
        print(f"Sequence : {record.seq}")
        break
    break